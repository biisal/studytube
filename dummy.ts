
export interface VideoDetails {
  id: string;
  embedId: string;
  thumbnail: string;
  title: string;
  channel: {
    name: string;
    avatar: string;
    subscribers: string;
    verified: boolean;
  };
  views: string;
  timestamp: string;
  duration: string;
  description: string;
  likes: string;
  transcript: string;
}

export const videoData: VideoDetails[] = [
  {
    id: "m0kZqa93u-A",
    embedId: "hXqwPsXXf8c?si=B2EO2p9nKuIph-cN",
    thumbnail: "https://i.ytimg.com/vi_webp/hXqwPsXXf8c/maxresdefault.webp",
    title: "IN The Spread Operator (or Variadic Functions) in Golang",
    channel: {
      name: "Flo Woelki",
      avatar: "https://yt3.googleusercontent.com/jmOqZGPl3HZi_I885d07avjjO399xLNHX9LXKWgdtsMJQ1lsZ8xFaqfh04_jFDwmpzO0RXPPnxw=s160-c-k-c0x00ffffff-no-rj",
      subscribers: "1.2M",
      verified: false
    },
    views: "3.2k views",
    timestamp: "10 months ago",
    duration: "8.37",
    description: "This is a description of a golang video",
    likes: "540",
    transcript: `
00:00:00	the problem with function definitions can sometimes be that you don't know how many arguments there should be so essentially the goal should be that the length of the function arguments should be defined by the user of this function so whoever uses this function and one solution would be to just use a simple slice right but there is a better solution which is called varia functions now vartic functions do sound really scary but the overall goal or the definition of a vartic function is that you can input a variable number of
00:00:35	arguments now this has a lot of advantages it makes your code more efficient and even more readable for other developers and it is also more developer friendly a really popular vartic function is the fmt print line function where you might now you basically can insert all sorts of arguments you want into this function so you concatenate the argument into one sort of list in the function call and then these arguments are printed to the console and I think the use cases of these specific vartic functions are
00:01:12	pretty easy to grasp as well basically whenever you don't know how many arguments in advance this function will take in you can Define this thing as a vartic function now a common use case for these vartic functions could be for instance operating on a slice or array of varying lengths which are then passed into the function so let's quickly take a look here now what I have here is a pretty easy to setup goang project from scratch and what we're going to do now is to define a sum function now the
00:01:46	purpose of this sum function is obviously to sum all the parts in numbers into one single integer for instance so let's quickly Define the function up here so we say sum and then we want to use the function in this way so let's just print the result of the sum function here so the sum function should return an integer or float for instance and then we're going to say sum so we're calling this function and here we want to pass in the arguments that should be sum up now for now I'm going to demonstrate the bad example which is
00:02:22	just going to declare an in slice and in here we're going to say 1 2 3 4 5 6 for instance and then just quickly do this function definition so like I said this should return an integer in the end and here we are going to take in an array of numbers which is going to be an ins slice now I think the logic is pretty easy to understand so we just going to return the sum here then we are going to return it and in the main logic we are just going to iterate over the array basically now I'm going to keep it
00:02:56	simple here and then we say sum plus equals to array and then add the index I so let's quickly run this function here with G run main.go and what we got is 21 but as you can see this is a pretty ugly solution right we have to kind of Define a dynamic array or slice in this case for just calling the sum function which is pretty ugly and not really developer friendly and not really efficient at all now and the best solution to refector this code would be to just use a vartic function right so in the end a varic
00:03:36	function is kind of similar or a variative function parameter is kind of similar to an in slice so it behaves like an in slice so we can like reuse this logic here with getting the length of the slice and getting the number by an index from this slice so vartic function is basically defined by three dots in goang so what we can say here is just instead of having the slice we can say dot dot dot and then int and now we've defined our first vartic function which is pretty cool I think so what we can do here in our sum function is we
00:04:17	can get rid of the slice definition so what we can say here instead is just to find 1 2 3 4 5 6 as the arguments because golang now knows that our sum function is a vartic function and therefore it takes in all the arguments we want to specify so now the length is kind of unknown and the user of this function or the developer of this function can Define their arguments in any order and also with any length now what is I think pretty important to note is that we can still use slices right so let's just say that I don't know we got
00:05:00	these numbers here from a database or something but this is a data structure which is of a dynamic array right so the data structure is a dynamic array which in goang is a slice so let's just say that we have our numbers here and now these numbers are in a slice now how can we Define now these numbers into our sum function and it is pretty easy cuz all we can do here or we can use is to lies literal syntax which behaves really similar to the spread operator in other languages so what we can say is just
00:05:39	nums and then dot dot dot now this looks pretty scary and advanced and a lot of dots going on here but all this takes in is basically it calls the sum function and now the nums or the elements of our num slice are going to spread into the arguments of our sum function so in the end this thing here is nothing else than this here right so it passes in all the slice elements into our sum function with this kind of slice literal syntax I think this is pretty powerful to know because obviously you can use this kind
00:06:18	of slice literal syntax somewhere else as well but coming back to variative functions obviously we can Define more arguments in our function here so for instance we can obvious ly say that the first argument could be a let's say starting point right and this starting point can be also an integer so now we got our starting point and let's just make use of that and say starting point for the initialization of our index I here so let's just save this and now obviously we have to define the starting point for
00:06:56	our sum call so what we can say is just say two here now this can be pretty confusing because we are kind of defining an integer and then we are defining more integers right so let's just get rid quickly of this num slice here and pass in our numbers and now this looks kind of weird right cuz we defined two and then we got 1 2 3 4 5 6 which seems to be really really weird but goling automatically knows that the starting point is just the first ARG argument so it takes in the starting point as our two here and then the rest
00:07:35	is basically the vartic function parameter so our kind of slice we use in the sum function now obviously we can mark this as a string for instance as well but what we cannot do in a variated function is to Define arguments after the variated function parameter so we cannot say for instance B integer right this does not work cuz obviously it's pretty clear that goaling does not know when this argument is going to occur right because this vartic function parameter can be of length n basically so let's just remove this here and now
00:08:15	hopefully varic functions are clear for you now I know this was a pretty short video but hopefully you now fully understand varic functions I think it's a pretty important thing to know in goang if you by the way want to know how to build a web server from scratch then I highly recommend watching this video here anyway thank you so much for watching have a lovely day and bye-bye`
  },
  {
    id: "kJQP7kiw5Fk",
    embedId: "PQ2WjtaPfXU?si=Cxs8yahSZ1a4gMjt",
    thumbnail: "https://i.ytimg.com/vi/PQ2WjtaPfXU/hqdefault.jpg",
    title: "Microsoft goes nuclear on TypeScript codebaseâ€¦ ",
    channel: {
      name: "Fireship",
      avatar: "https://yt3.googleusercontent.com/ytc/AIdro_mKzklyPPhghBJQH5H3HpZ108YcE618DBRLAvRUD1AjKNw=s176-c-k-c0x00ffffff-no-rj-mo",
      subscribers: "3.85M",
      verified: true
    },
    views: "1.1M views",
    timestamp: "1 months ago",
    duration: "4.08",
    description: "This is a description of a Fireship video",
    likes: "23k",
    transcript: `
00:00:00	yesterday Microsoft dropped an unexpected bombshell on programmers when it announced that the Beloved typescript programming language is being completely reprogrammed a typescript is one of the most important projects in modern web development but it has one fatal flaw the typescript language itself is written in typescript and typescript is just not optimized for building things like typescript but you won't believe which language Anders hilburg and Microsoft chose for the rewrite it's not the battle tested C++ it's not
00:00:26	Microsoft's Golden Boy C it's not the highly memeable rust it's a language know expected which I will reveal in dramatic fashion at the end of this video to optimize viewer retention for the algorithm just kidding I ain't F to play you like that they used go a language developed by their arch nemesis Google a language with a simplistic type system and limited functional capabilities a language that many people on the internet love to hate nowadays all the CP and rust Fanboys are feeling the effects of this Panic function right
00:00:52	now and in today's video we'll find out why this is a huge deal and answer the question of why did Microsoft go with go it is March 12th 2025 and your watching the code report another day another bat signal that must be answered but this trend of waiting for the fireship video on every Tech announcement has gotten out of control the tech companies like Microsoft spend millions of dollars making these videos and you guys are screwing everything up causing the entire global economy to collapse I'm
00:01:15	Michael Jordan stop it get some help that being said Anders hilburg is one of the true 10x developer unicorns out there he's the creator of Turbo Pascal C and typescript and you really should watch his video typescript is not your typical programming language it's a super set of JavaScript and doesn't actually have its own runtime TS code gets compiled or transpiled to JS code which then runs somewhere like node.js Dino bun or the browser the problem is that because the typescript compiler is written in typescript there's an
00:01:44	inherent lack of support for low-level optimization like direct memory access native multi-threading and so on the only way to truly fix the typescript compiler was to not write it in typescript by switching to go the compiler is already 10 times faster like they cut the vs code compile time from 70 seconds to 7 seconds and they got similar 10x speedups on a bunch of other projects that's cool and all but the average developer should also see big performance gains in the editor in big projects typescript can be annoyingly
00:02:11	slow in VSS code but the new compiler will change that in a big way the big question though is why would Microsoft use go well unlike JavaScript go is a compiled language and when you write go code it can be compiled into optimized machine code for all chips this differs from Java or C which is compiled into B code and then runs on a virtual machine in addition go uses automatic memory management via garbage collection which generally makes it easier to work with compared to something like C++ or rust
00:02:38	but aside from performance I think the main reason they chose go is for portability you see calling this a total rewrite is actually not the right nomenclature it's actually a port to a new language what they're doing is going through every line of typescript code and converting it to the equivalent go code which means the behavior and semantics of the original code base is preserved all of your favorite annoying compiler errors will still happen just 10 times faster than before but we won't be able to reap these benefits right
00:03:03	away we're currently at typescript 5.8 but they're not going to release the new compiler until typescript 7 and it will likely take many months if not years to get there now even though I'm still but hurt that Microsoft kicked me out of the MVP program I think they deserve a lot of praise for the decision to go with go they could have used one of Microsoft's in-house languages they could have jumped on the rust or Zig hype trains but instead they put their egos aside and use the best tool for the job but if
00:03:26	you're building a serious project with a lot of code like this one thing's for sure your code will break and the best way to fix it faster is with Sentry the sponsor of today's video their brand new Trace Explorer lets you search filter and visualize your span data across multiple traces in your codebase is so instead of just debugging one request at a time you're able to easily spot recurring issues in bottlenecks then drill down to the exact span that's causing trouble and make a quick fix you
00:03:51	can even calculate key metrics like 95th percentile latency and turn them into alerts and beautiful dashboards for monitoring it's the tool of choice for making your code not suck and trusted by 4 million developers myself included give Sentry a try for free today with the link below this has been the code report thanks for watching and I will see you in the next one
`
  },
  {
    id: "JGwWNGJdvx8",
    embedId: "xWIDvnNFl5I?si=lXz37ME1Yc6Ko5hn",
    thumbnail: "https://i.ytimg.com/vi/xWIDvnNFl5I/hqdefault.jpg",
    title: "What the hell is a Tiling Window Manager? Linux For Newbs EP 2",
    channel: {
      name: "Typecraft",
      avatar: "https://yt3.ggpht.com/QOHUDP-HekFhzwb2HJnyaMngXh55Gu3zh9PPcAZfr94erhUWThk1ohZmlEm-xoWLtfJXMY13=s176-c-k-c0x00ffffff-no-rj-mo",
      subscribers: "165k",
      verified: false
    },
    views: "158k views",
    timestamp: "11 months ago",
    duration: "12.32",
    description: "This is a description of a Linux and window manager video",
    likes: "6.4k",
    transcript: `00:00:00	so let's say you have a Linux installation maybe you're using Arch by the way and you're using a desktop environment like gnome or KDE and you're ready to take things to the next level let me put it a different way let's say you're driving a Volkswagen it's a great car it's safe it's reliable I love Volkswagens but what if you want to feel the speed of a Lambo you're ready to hop into a Lambo you feel the Earth beneath you you feel the car moving everything is crazy and you just get into the Zone
00:00:26	that's what you want to do in your Linux environment I mean sure maybe if you make a mistake you drive off a cliff by accident but you get that pure speed and thrill of using such raw power basically what I'm trying to say is in this video we're going to install a tiling window manager in our Linux environment so let's get into [Music] it so welcome back to Linux for noobs this is a series that's going to bring you from zero to maximum productivity with Linux we're going to be copying some of the configurations of the best
00:01:03	content creators out there that look like they're just flying around their installations and doing programming at just an amazing Pace we're talking about people like the primagen TJ De or I mean hey even typecraft this series is aimed at people who just want full control over their environment and their development setup so that they can get into the flow state right away and start programming faster than ever before now to get this amazing Linux set up I think we need a tiling window manager so let's
00:01:28	go ahead and install one we're going to install I3 now if you remember from our previous video by the way if you haven't seen it please subscribe and check that out we already installed Linux which is Arch by the way with a desktop environment already installed called gnome gnome is amazing but we want the raw power of a Tyle and window manager so let's go ahead and install I3 we can go to our terminal and using Pac-Man install I3 yes but wait let's take a step back what the hell is I3 and what the hell is
00:01:59	a Ty Window Manager let me explain a tiling window manager is a window management system that arranges windows in a gridlike fashion this is different from a typical window management system that allows you to stack windows on top of one another and use the mouse to kind of move Windows around and snap them into place wherever you might want them a tiling Window Manager enables you to focus on using just your keyboard not the mouse to navigate between your windows your workspaces your panes whatever let me show you a really quick
00:02:28	demo so this is our current Arch Linux installation running gnome gnome is a desktop environment that employs a typical stacked window management system when you open a window it opens and you can drag it around with your mouse and you can move things around from side to side but typically what you do is you focus on using your mouse in order to navigate between all your windows this is very different than a typical tiling window manager which I have here this is an I3 install on my machine I can open
00:02:53	up my terminal with one key press and if I want I can open up Firefox with a simple selection and these two two windows are now in a grid fashion next to each other this makes things easy for me to navigate back and forth between my windows left and right left and right and I can change the orientation of how these windows are set up so if I want like a tabbing sort of setup I can push one button and now my windows are set up in tabs I can go left and right left and right now they take up the full screen
00:03:21	and they're tabbed I could also split them back out and then I could also select the parent of this and create another window over here then I can change the layout of all of these the options are Limitless and the best part is my hand never has to leave the keyboard it keeps me in the zone in programming between neovim Firefox Discord whatever it keeps me in the zone this is why I love tying window managers and I love I3 let me explain a little bit about I3 now I3 is a tiling Window Manager that's been around for a very
00:03:49	long time it's based on the zorg window server protocol and it's been around for so long that it just has a ton of documentation it has really great plugins and a lot of awesome well readable well documented code and there's a lot of configuration examples it's been around forever I like i3wm mostly because it's the only tiling window manager that I've actually configured so it's just something that I'm more comfortable with also I know for a fact that some of the examples that I used before like the primagen and
00:04:18	TJ De they use i3wm so if you want to be like them you're going to want to use this too now i3wm I mentioned is based on zorg zorg is an implementation of the X window system it's a protocol for window management and it's been around also for a very long time now this is a little bit controversial because zorg is actually a fairly old piece of technology that's Legacy for Linux its architecture is kind of a mess a lot of the code base apparently isn't all that great and there's some security issues
00:04:45	around the platform itself now one funny thing to note when I visited the xorg foundation website I noticed this logo here does this look familiar come on musk you're better than that anyway eventually zorg is going to be replaced by another window management protocol called whand whand is more modern it's more lightweight it has better features a better API for other developers to use the list goes on and on it is going to be better than zorg eventually as of right now though there's some issues
00:05:14	with fractional scaling and some other things that just get me back to using zorg by default it just makes it a little bit easier to use my systems I don't know why I've configured zorg before the options make more sense to me and for now zorg works but in the future you're probably going to want to switch to Wayland And what does that mean well i3wm is only for zorg it does not work for Wayland there is a port of i3wm for whand it is called sway it is supposed to be a dropin replacement for I3 so if
00:05:44	you're interested in I3 and you want to use Wayland use sway now there's also one more very very interesting tiling Window Manager that's based on Wayland that I think is really really cool it's called hyperland or hyperland there's no e there so I'm not sure how to pronounce it but hyperland looks awesome it's very modern and there's been a lot of community support for it seriously if you go into Reddit and look at the Unix porn subreddit literally every two posts is someone posting from a hyperland
00:06:13	installation it looks great but all things being the same I'm using i3wm I can configure it easily I know how it works and this machine right here is running i3wm so I'm comfortable with it and I like it but you can choose your own tiling window manager just read the docs and Dive Right In it's fun seriously and they're all great options they really are so now with that being said let's get back to our I3 installation that we have in our virtual machine over here let me just make this full screen and let's log into the
00:06:40	system so as you remember we just installed I3 using our terminal now to use I3 what we do is we log out of our current session in Gnome and go back to our gdm gnome display manager let's log out and this by the way is why I installed gnome first on this system I love using some of gnome's utility ities and programs alongside I3 the main one that I like using is gdm the gnome display manager it just makes selecting your desktop environments or window managers much easier and you can play around with whatever you want if you
00:07:12	want to install hyperland you can do that it'll get picked up by gdm and you can see in the selection here we have I3 so let's click on I3 and let's log in we use our super secure password that we set up in our last video and we're in I3 isn't this gorgeous it's absolutely beautiful I get it it looks like crap but we're going to configure this in future episodes let me show you a little bit how it works now one of the coolest things you can do in I3 is open your terminal with just a simple button press
00:07:40	for me this is going to be mod mod on my machine is the window key you can also set it to alt it'll actually prompt you when you first install I3 to set your mod key to either windows or alt you can easily reconfigure this though so don't worry choose whatever you think is good anyway when you press Alt Enter it'll open I3 sensible terminal which will autodetect the terminal and open it for you so we hit Alt Enter and wait nothing happened oh crap I don't think I have a terminal that I3 recognizes as an I3
00:08:11	sensible terminal well this is a good thing because I want to show you how you can configure stuff even if I3 is broken there's a simple command here to exit I3 it is shift mod e that will bring up a small menu and you can click yes exit I3 and again this is why I wanted to install gnome on this system alongside I 3 in case anything's broken in I3 and you don't really know exactly how to fix it yourself you can always just log back into gome and so from here we're back in Gnome we can install a terminal that we
00:08:41	think I3 will actually recognize so I want to install my favorite terminal at least lately is alacrity so let's open up our console in Gnome and install alacrity yes now La is installed now we can merely click on log out from gnome and select I3 from our list right here and log back in now if we hit mod enter it opens up our terminal it is a lacity how cool is this now the other thing that I3 ships with is a tool that allows you to search and select programs on your computer this is called dmenu and
00:09:14	typically you type mod D to open up dmenu but wait it's not loading well that's easy enough we can just install dmenu now that we have our terminal it's easy to install new programs okay we installed dmenu now let's hit mod D and look up at the top we opened a really small program that allows us to search and select programs that we've installed now let's install something else like uh I don't know Firefox okay now that Firefox is installed if I do mod D and start typing fire I get Firefox as an option now if I
00:09:50	hit enter it will open up Firefox in a split on the right hand side of my terminal guess what guys we're using a tiling Window Manager how awesome is that so now let's just look over some of the great things you can do with a tiling window manager if I hold down the mod key this allows me to use my arrows to go left and right so I can switch between my pains left and right in a future video we're going to configure this to use Vim key bindings it's going to be amazing trust me anyways you can use mod Left Right to switch between
00:10:17	your panes your windows that you have open on this workspace if you do mod and a number it'll open another workspace corresponding to that number so mod two means I open up workspace two so now I have workspace one workspace two 2 now on workspace 2 I can open up anything else maybe just another terminal I can go back to workspace one with Mod one workspace 2 workspace one workspace 2 great awesome now if I want to make any of these screens temporarily full screen I can do mod f that makes Firefox full
00:10:45	screen hitting mod f again brings it back down if I want to make these into a tabbed screen I can do mod W that breaks out these panes and puts them together in a tabl like fashion so I can go mod left and right and each window is full screen but they're tabed together so it's easily to go between them again I can go workspace one workspace 2 back to workspace one and I can go back and forth between my windows now if I want to break out of this I can hit mod e and mod e toggles the orientation of my pan
00:11:13	it goes from vertical split to horizontal split so if I keep hitting e it'll go back and forth between a horizontal split or vertical split now from here I can select the parent which is the whole entire window with Mod a now if I open up a new window it'll open it up above these two windows right here so if I open up a terminal and then I hit mod e you can see that my bottom terminal is sort of like its own Pane and the top two windows right there are its own pain as well so I can exit this terminal and I'm back to where I was
00:11:41	exit and we can also open up any of the graphical things that we have from gnome like I don't know calculator and it might open it up in a huge big screen if you want to make this a floating window we can do shift Mod Space that turns us into a floating window and if you hit shift Mod Space you get back into full screen mode normal mode whatever you want to call it we can open up a terminal right here and you can see that it's just a really fun and reactive environment to open up windows open up
00:12:06	panes open up workspaces and flip between all of them it's so fun so that'll do it for installing a tiling Window Manager namely I3 in our Arch Linux installed Stick Around And subscribe because the next video we're going to go over configuring I3 making everything look gorgeous so remember to stick around and subscribe and hey thanks nerds
`
  },
  {
    id: "9bZkp7q19f0",
    embedId: "1hGwZ-IeN6M?si=RgJP43yxhvWF0hqF",
    thumbnail: "https://i.ytimg.com/vi_webp/1hGwZ-IeN6M/hqdefault.webp",
    title: "Announcing DiceDB 1.0",
    channel: {
      name: "Arpit Bhayani",
      avatar: "https://yt3.ggpht.com/i-6cNn9cDCHynO_fpxiGAT7BuGLc7Oi8avR0aBXuOAY6qetb74esJxM2IcQVyx3RPwerrZcX=s176-c-k-c0x00ffffff-no-rj-mo",
      subscribers: "169k",
      verified: false
    },
    views: "67k views",
    timestamp: "1 months ago",
    duration: "7.54",
    description: "This is a description of DiceDB 1.0 announcement",
    likes: "3.1k",
    transcript: `
    00:00:00	Hi, my name is Arpit and I want to ask you all one very simple question. What if overnight your cache becomes faster, starts to leverage all underlying CPU cores and becomes reactive? Which means it keeps your clients updated in real time without extra complexity. That's exactly what we set out to build. Introducing DISDB 1.0, an open-source fast reactive in-memory database optimized for modern hardware. Today, I'd love to share what makes Dice DB special and how it can help you build better low latency applications. So,
00:00:35	modern applications demand speed, scalability, and real-time updates. But most existing databases and caches weren't designed to be truly reactive. This often means writing extra code to pull for changes or maintain complex event-driven systems. We wanted to simplify this. TASDB is built to be an in-memory database that not only delivers high throughput and low latencies, but also reacts to changes in real time. Now, no more unnecessary polling, just efficient instant updates when the data changes. Before I show you
00:01:10	a couple of interesting demos of reactivity, let's look at some performance numbers. We tested DICED DB against Reddis on a HSN CC2X machine with 4 vCPUs and 16 GB RAM which is a decent size machine to test things on. Running get and set operations with four clients using our benchmark utility called Mebench. Mebbench essentially tests end toend perceived latencies for the given set of operations. And here's what we found. DICED DB provides higher throughput and lower median latencies making it well suited for modern
00:01:46	workloads. By the way, if you want to handle more throughput from a single node, just vertically scale the machine and DICED DB will use all the underlying cores and will scale throughput linearly. This way you will be utilizing the underlying hardware to the fullest. But performance is just one aspect. What truly sets DICEDB apart is its reactivity. Let's install DICED DB and write our first hello world to see what it is all about. So to start or to install DICSDB. You can very quickly start with a simple docker command or
00:02:22	you can build it from source you go to dice db repository which is diceed db/d dice and in that you'll find the docker command to run. I'll copy paste this onto this and it essentially starts my docker container. Now I can install dice db cla. So for you to interact with dice db you need to install diceb cla which you can do it with just two very simple commands. I need to put password. Once that's done I copy paste this curl [Music] command and I run it. This installs the dice db cla and we are all set to go.
00:02:56	Now to start the db cla I do db hyphen cli. I had my server running over here. My cla is connected over here. I can do classic set operations and get operations. Set key, comma, value. It said okay, I do get K. It gives me the value back. A classic get and set operation. But this is what we typically see with a very standard cache cache use case. Right? Now let's talk about what reactivity is all about. Like that's the cool feature out there. So like get like apart from the regular get command that
00:03:29	we just saw, we also have a get.watch watch which is a reactive variant of get. With this you are essentially subscribing to the get command and whenever the value that command depends on updates your client will automatically receive the result. Not just the notification but the result. Let me explain this with a very simple example. So on this first terminal session I have connected my uh I have connected using CLI to my dice db. I run get k I get value v. But instead of get k I run get do. K. So here I have
00:04:05	initiated my watch subscription. I go to another command and run dice db - cli in which I do regular get k. I get the value v. But if I do set k, v1. So I changed my value from v to v_sub_1. The prior session was subscribe to it and I hit enter. the value changed and I got the update in real time. Now if I change the value to V2, bam, I get V2 over here. Right? This way without me pulling for the changes, the database is pushing the updates. So now there is no need for constant polling, no need for manually
00:04:46	checking if something changed, just realtime updates delivered seamlessly. This makes handling realtime data so much easier. By the way, in subsequent releases, we will be shipping many more commands that are all readonly commands with with a reactive equivalent, right? That's the best part of DISDB. So, what's the practical use of it? Let's understand this with a very simple CLI chat room example. So, for example, I have my dice DB running over here. I have run uh so I have built a very simple CLI chat room application which
00:05:21	you'll find in the DSDB repository under examples. So on dice db repository if you go under examples you'll find a chat room go application which is loaded right here. So if I run go run main.go I have to start it with my name arpit it connected to a chat room session right now I do the same on another window web v. Okay. Now when Arpit sends a message I say hey. So I see the message sent by Arpit over here. Received the message over here itself. Now when web sends hello bam I get the message here. This
00:06:01	is very this is exactly what reactivity is all about without there is no polling. If you look at the source code of chat room you would see no polling whatsoever. It's all reactive. So we made the entire stack reactive. Now the database is proactively pushing data to the clients whenever it changes to whoever has subscribed to it. That's the best part. This is pretty pretty pretty cool feature of DICED DB that we wanted to double down on. Now apart from this reactivity which is a really cool feature of DICD. We support a a very
00:06:36	familiar set of commands making it easy to integrate into existing systems. the commands like drr DCR by DL eco exist expire and so on and so forth. So if you have worked with radius you'll find dice db easy to pick up with just an added with just an added benefit of reactivity. Here you can also find hello world a simple hello world in golang with cls and a reactive application that we just saw. We have a golang based SDK for you to get started with it right and a CLI chat room that I just showed you.
00:07:07	Now the best part the best part is that DICED DB is fully open source. We believe great software is built collaboratively and we are excited to have the community contribute, improve and shape DSDB alongside us. Everything from the core database to supporting libraries everything is licensed under BSD3 clause ensuring openness and flexibility for developers. DSDB 1.0 is here fast, reactive and open to all. If you're working on a low latency real-time application or need a high performance cache, we'd love for you to
00:07:41	try ISCDB. Give it a spin and contribute if you'd like. There are a lot of bugs to fix and lot of features to be built. We are reimagining what a modern cache should do. So stay tuned. Have a good day.
`
  },
  {
    id: "RgKAFK5djSk",
    embedId: "Je5WBk91Wlc?si=1N2I9JOiTExDUCFh",
    thumbnail: "https://i.ytimg.com/vi/Je5WBk91Wlc/hqdefault.jpg",
    title: "How to learn better and faster as a software engineer?",
    channel: {
      name: "Arpit Bhayani",
      avatar: "https://yt3.ggpht.com/i-6cNn9cDCHynO_fpxiGAT7BuGLc7Oi8avR0aBXuOAY6qetb74esJxM2IcQVyx3RPwerrZcX=s176-c-k-c0x00ffffff-no-rj-mo",
      subscribers: "169k",
      verified: true
    },
    views: "61k views",
    timestamp: "1 year ago",
    duration: "14.56",
    description: "This video shares tips for learning efficiently as a software engineer",
    likes: "9.8k",
    transcript: `
    00:00:00	so the domain of software engineering evolves rapidly which means one tool or Tech that is relevant today might not stand tall a few years later this requires us to stay relevant by learning new skills continuously so today from my personal experience I'll try to answer this one question how to learn better and faster as a software engineer I typically follow these five things to ensure I'm learning continuously and evolving as a better engineer every single day so here it goes the first one is what I called register your curiosity
00:00:35	we as humans no exceptions are curious by Nature whenever we something whenever we see something fascinating we typically think hey how does this work let's say you started working with the database let's say my SQL and you see it guarantees acid you would wonder how is this database implementing acid right when you see red is you see hey it supports so many amazing data structure how is it doing it so given this given you are so curious about it what has happened is it has intrigued you it has
00:01:07	spiked that interest now we typically start pondering on how that happens but then some of the other distraction comes and we just let it go now what happens is which is where what I typically do is whenever something has spiked my interest I immediately open my note taking app and make an entry of it that's it just one blunt entry of something that has spiked the interest now here the key thing is because this is something which is which has naturally intrigued me now what happens is because it has naturally intrigued me
00:01:42	I do not want or I don't I won't need an external motivation to go and read about it whenever I would revisit that thing it would automatically come hey because it was naturally I was naturally inclined to know that I would automatically go and read it so but it's important that whenever has something spiked interest you don't just let it go instead pick your favorite note taking app and just make an entry about it for example I recently or or rather few months ago I was reading about or I saw somewhere something called as a convey
00:02:18	Game of Life I was very intrigued by it I immediately Googled and I found a term called cellular automata and that cellular automata seems like a huge am like huge enough field I'm like hey I need to read that what I did I immediately made an entry into now this is where what I do is I make an entry not just that hey I want to read this but why I want to read this for example I need to know because the reason is what has spiked that interest what I want to read is okay but why I want to read it is really important because that
00:02:51	is something that I don't want to forget when I read that Y part I would be more likely to go and you know read about it I'm like I'm I'm implicitly being pushed into reading about it I may choose to read it a month or two or five later but that's fine but at least I would have a reason a personal reason to read it for example I want to read about cellular autometa because I was fascinated after seeing conest Game of Life or I want to dive deep into redis internals because I'm fascinated after seeing the advanced
00:03:21	data structures it supports so learning and why it's really important right okay now apart from that whenever you have any question any anything that has spiked your interest just in at least jot jot those questions down that hey let's say you were reading about database you want you saw how a distributed SQL database like cockr DB guarantees as it that's a question you might not know the answer just make a note of it because not everything needs to be done today right so anything that can be deferred just deer it into your
00:03:55	notes and then revisit it often to just go deeper into those responding aspects right okay so that's first register your curiosity because you have storing it in your note teing app so when you revisit you would not be missing things out and you don't have to fill everything in your head that hey I would remember this and that you can occasionally revisit your notes and just see this is what I now that I have time I can read more about this right okay the second thing is what I called jump start now what
00:04:26	happens is we as humans no exceptions again are la we like to Deer things we like to procrastinate and that's very natural so but what happens is when you are when you would want to learn something you have to get rid of your laziness so instead of waiting for that correct time just start right now instead of waiting for the best resource to learn something start right now and especially when you're going on that 0o to one Journey where let's say you don't know anything about cockroach DB but now you want want
00:05:00	to dive deep into it so when you're going into this 0 to one Journey literally any resource is good you don't want to find the best resource anyway because when you are more familiar with the things the terms the internals or anything it would be very natural for you to filter out and say hey this does not seem deep enough let me find some another resource but when you are at Absolute Zero it really does not matter so just start with anything and everything that you have right so jump starting is really important important
00:05:30	do not procrastinate is really important I never procrastinate I have that list maintained whenever I find time I literally jump into it instead of finding the best resource out there to learn something or finding the best time to do it or Worse finding a continuous time block where no one would disturb me it's not possible in today's day and age so whenever you find that slice of time go for it right the third one is what I called do the laundry so we never we all don't like to do laundry because that's
00:05:58	boring so what I mean by doing the laundry it's simple that we typically like let's say I got an idea that hey I would dive deep into redish internals so now what happens I can just keep thinking hey if I know redish internals ah I would do this I would do this I would create this post I would create this videos and whatnot now what happens is we like to live in a beautiful world made up in our head because how like for examp how amazing it would be to learn goang or I can do so much I would optimize this particular code I would
00:06:30	write I would like rewrite my entire micro service now what happens is you are building stuff in your head rather than doing the laundry what is doing the laundry over here just get your local ID set up and start coding the things out instead of going through tutorial hell where you're reading tutorial after tutorial after tutorial and not implementing it that's where the problem is because we as Engineers unless and until we Implement everything is just in our head we would not be sure on how those things work or what are the
00:07:02	practical limitations of it what are the practicals problem with the things that you would want to learn so just get your local ID set up in case you cannot do local ID setup just start something on a website like replit right which which gives you remote ID and start coding things out and here I'm taking example of learning a language it could be a database it could be anything just get your hands dirty do the laundry and start the coding things out so so so important no matter at what stage of your career you are at please
00:07:37	don't just do like don't just keep reading and reading and reading focus on implementation like what I personally do is any research paper that I read I try to implement the core of it I won't implement the entire system but at least the core of it that seems very interesting or I am unsure about I go and Implement that really really really important the next one is what I call the inverse power law so inverse power law is basically the thing is that a lot of people like for example whenever I want to learn something what happens is
00:08:09	I'm actually fascinated by some Advanced concept if I'll give an example let's say I am intrigued by Red internals so what I would do is hey how does redus implement let's say GEOS special queries now that's an advanced part why should I directly jump on that because I cannot just say hey because that is interesting I'll directly jump into that but now what happens is when you jump into that you will stumble upon so many new terms which you are unaware of and you say hey I don't know stuff and you keep and you
00:08:36	typically leave it there that's wrong what should you do in such situation is you always start from absolute zero and then increase right so inverse power law is basically you spend more time on Basics and then gradually you lower it down so that's a inverse power law that we all studied right so follow that spend more time preparing the basics and the foundation side it would make it easier for you to grasp the advanced stuff right so try to start and it does not mean that you should just keep
00:09:09	focusing on Basics and Basics and Basics and spend very little time over here but if you don't spend time understanding the basics or not have a solid foundation it would be very difficult for you to understand when things go tough right how are this Advanced part implemented you would know you would not know that so it's really important to do it for example for example uh basically chat GPT and large language models are all the AG now if I just directly start hey I want to know how large language
00:09:36	models work I'll open the paper or I'll open a few videos some random things would happen and as soon as the math part comes in I'll gone because I don't know the basics of neural networks I don't know basics of calculus how would I be able to comprehend how llms work right so it's always better it's always better to understand that hey you need to spend decent enough time focusing on the fun fundamentals before jumping into the advanced stuff although the advanced stuff actually intrigued you more right
00:10:06	so remember this inverse power law more time spend on the easy part it would make you spend lesser time when things go tough right okay that's the next one and the final one the final one the fifth one juggle and time box so we underestimate how much we can do in parallel we typically think that hey let me pick up this one thing I'll do this one thing really well but now what happens is you get bored of it if you think about it the last time you were intrigued by something you wanted to study something you typically left off
00:10:43	after a few days because you got bored of it why did you get bored either it becomes really difficult that you are not able to understand or it just is boring right so what happens is in today's day and age it's very easy to be distracted very easy to be distracted by something fancier for example let's say I started going through internals of cockroach DP but then suddenly I stumbled upon an article that talks about lenux kernel I would be very intrigued by it so but now what happens is I would leave this cockr DB aside and
00:11:14	I would jump into that other ship and then while I doing that I would find something else I would jump on something else and then something else eventually I'm not able to accomplish anything and that's wrong so instead what you should do is pick not just one thing pick two or three depending on your capacity but at least two pick at least two things that you would want to learn in parallel if you get bored by one switch to other if you get bored by the second one switch to the first one this way you
00:11:43	would able to make significant progress on almost both of them and you would do justice you would do justice to your decision of learning that particular stuff I've seen so many people starting with goang and then IM no rust is all the I'll go and switch to rust and they don't even know goang or don't even know rust that's the problem right so it's always better pick two things in par two languages two texts whatever you find interesting and amusing but pick two things to do in parallel both by one
00:12:13	switch to other do justice to your decision now but how long let's say you picked up something and you realize that this is really boring and I cannot do that for example large language Models All the Rage you saw the hype you jumped on the ship and said I'll study this but what happened is after some days you realize maths is not my cup of tea so now what right you cannot just leave that you would feel like hey because I spent one month but now I leave that that would be wrong I'm doing Injustice
00:12:42	and whatnot but it's okay what you should do is what I typically do as well as is I time box every single thing for example if let's I want to learn goang I would time box it hey I'm giving 3 months time for me to study golang but within that I would evaluate in one month if I'm good enough like is this good enough for me to extend that right so one month I'm just time boxing it that I won't spend more time than that and it would be my decision- making call that hey do I want to dive deeper or not
00:13:12	but give yourself enough time do time boxing of that stuff so that you just don't go keep on learning and learning and learning that one thing throughout right because there are far too many interesting things to miss out on to be honest right so learning multiple things at once has ensured me that I don't get bored of stuff because if I get bored of one I can go to another so now and why two things is because let's say if I don't pick two things if I get Bor of one what's the alternative Instagram
00:13:40	scrolling right don't do that so which is where I pick two things to study in parallel and if I get bored of one I immediately switch to other that's the easiest way for me to do it but always remember it's okay to get bored it's okay to drop something that you started it's okay to not fulfill your commitment of learning a specific thing it's okay everyone has limitations and you should acknowledge that that hey it's not my cup of day for example deep learning is not my cup of tea so I would just leave
00:14:10	it I would not invest a lot of time into learning calculus from absolute scratch and doing it right giving an example right so it's okay to drop things that you realize that it's not good enough for me at the moment to study and yeah these are the five things that I typically do to ensure that I learn better and faster just a quick gist of it the first one was register your curiosity second one was jump start third one was do the laundry fourth one was the inverse power law and fifth one was juggle and time box and yeah this is
00:14:42	all what I wanted to cover in this one I hope I hope this helps you in becoming a better engineer learning better learning faster and having an accelerated career growth So yeah thank you so much for watching that's it for this one I'll see you in the next one thanks a
`
  },
];

